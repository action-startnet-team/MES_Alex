@using MES_WATER.Models;
@using System.Data;
@using Newtonsoft.Json;

@{
    //公用函數庫
    //Comm comm = new Comm();
    //GetModelValidation gmv = new GetModelValidation();

    // 參數
    string sPrgCode = ViewBag.prg_code;  // 程式代號
    string sLimitStr = ViewBag.limit_str;  // 權限字串
    string key = ViewBag.primary_key;   // 鍵值
    string pTkCode = ViewBag.pTkCode;
    string pForeignKey = ViewBag.pForeignKey;

    // Custom
    string customHtml_header = ViewBag.customHtml_header;
    string customJs_bottom = ViewBag.customJs_bottom;
    string customJs_loadComplete = ViewBag.customJs_loadComplete;
    string onEachRowJs = ViewBag.onEachRowJs;
    string sPostDataJs = ViewBag.sPostDataJs;

    // jqGrid選項
    List<JqgridButton> addBtnsInActionCol = ViewBag.addBtnsInActionCol;
    string sEnableRowFilter = ViewBag.enableRowFilter;  // 是否有row filter
    string sIsMultiselect = ViewBag.isMultiSelect;  // 是否多選
    int sPageCount = ViewBag.page_count;  // 每頁顯示筆數

    //group功能
    bool isGroup = ViewBag.isGroup;
    string sGroupField = ViewBag.sGroupField;
    string sGroupFieldName = ViewBag.sGroupFieldName;
    string sGroupFieldRelTextCode = ViewBag.sGroupFieldRelTextCode;

    // 行內修改的下拉資料
    Dictionary<string, List<DDLList>> dropdowns = ViewBag.dropdowns;

    // Urls
    string sGetDataUrl = ViewBag.sGetDataUrl;  // 主檔資料來源 (ajax url)
    string sInsertUrl = ViewBag.sInsertUrl;  // 新增按鈕的跳轉頁面url
    string sUpdateUrl = ViewBag.sUpdateUrl;  // 修改按鈕的跳轉頁面url
    string sDeleteUrl = ViewBag.sDeleteUrl;  // 刪除資料的ajax url

    string sChkInsUrl = ViewBag.sChkInsUrl;  // 刪除資料前檢查的ajax url
    string sChkUpdUrl = ViewBag.sChkUpdUrl;  // 刪除資料前檢查的ajax url
    string sChkDelUrl = ViewBag.sChkDelUrl;  // 刪除資料前檢查的ajax url

    // 欄位設定
    List<DDLList> query_DDL = ViewBag.query_DDL;    // 查詢下拉選單
    List<DDLList> field_op_DDL = ViewBag.field_op_DDL;  // 查詢的運算子的下拉選單
    List<ColumnInfo> ColumnInfoList = ViewBag.ColumnInfoList;  // // 欄位設定
    DataTable dt_hiddenSettings = ViewBag.dt_hiddenSettings;

    //
    string grid_id = ViewBag.grid_id;
    string grid_pager = ViewBag.grid_pager;

}

@* 插件 *@
@* 不知道怎麼一次寫多行 *@
@*@Html.Resource(@<link rel="stylesheet" href="~/Scripts/assets/jquery-ui-1.12.1/jquery-ui.css" />, "head_plugins")
    @Html.Resource(@<link rel="stylesheet" href="~/Content/assets/css/ui.multiselect.css" />, "head_plugins")
    @Html.Resource(@<link rel="stylesheet" href="~/Content/assets/css/ui.jqgrid.css" />, "head_plugins")
    @Html.Resource(@<link rel="stylesheet" href="~/Content/assets/css/chosen.min.css" />, "head_plugins")*@

@Html.Resource(@<script src="~/Scripts/assets/js/jquery-ui.min.js"></script>, "footer_plugins")
@Html.Resource(@<script src="~/Scripts/assets/js/ui.multiselect.js"></script>, "footer_plugins")
@Html.Resource(@<script src="~/Scripts/assets/js/jquery.jqGrid.min.js"></script>, "footer_plugins")
@Html.Resource(@<script src="~/Scripts/assets/js/grid.locale-cn.js"></script>, "footer_plugins")
@Html.Resource(@<script src="~/Scripts/assets/js/chosen.jquery.min.js"></script>, "footer_plugins")

@Html.Resource(@<script src="~/Scripts/assets/js/bootstrap-datepicker.min.js"></script>, "footer_plugins")
@Html.Resource(@<script src="~/Scripts/assets/js/bootstrap-datepicker.zh-TW.min.js"></script>, "footer_plugins")



<table id="@grid_id"></table>
<div id="@grid_pager"></div>

<!-- Modal Content -->
<div id="modal-form" class="modal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">

            <div class="modal-header">
                <div class="row">
                    <div class="col-sm-3">
                        <div class="radio">
                            <label>
                                <input checked name="query_type" type="radio" class="ace input-lg" value="NEW">
                                <span class="lbl bigger-110"> 新查詢 </span>
                            </label>
                        </div>
                    </div>
                    <div class="col-sm-4">
                        <div class="radio">
                            <label>
                                <input name="query_type" type="radio" class="ace input-lg" value="KEEP">
                                <span class="lbl bigger-110"> 保留已查詢的資料 </span>
                            </label>
                        </div>
                    </div>
                    <div class="col-sm-5">
                        <div class="radio">
                            <label>
                                <input name="query_type" type="radio" class="ace input-lg" value="IN">
                                <span class="lbl bigger-110"> 在已查詢的資料中尋找 </span>
                            </label>
                        </div>
                    </div>
                </div>
            </div>

            <div class="modal-body">
                <div>
                    <span class="h4">查詢欄位</span>
                    <a class="add_query btn btn-white btn-info btn-bold" role="button" style="margin-left: 10px">
                        <i style="font-weight: 400" class="glyphicon glyphicon-plus  blue"></i>
                        <span class="">新增查詢條件</span>
                    </a>
                    <a class="clear_query_last btn btn-white btn-info btn-bold" role="button" style="margin-left: 10px">
                        <span class="">清除上一個條件</span>
                    </a>
                </div>
                <div id="query_sql_div">
                    <div class="row">
                        <div class="space-6"></div>
                        <div class="col-sm-3">
                            <select class="form-control" id="" name="field_code">
                                @CustomHelper.Get_Option(query_DDL, "", false);
                            </select>
                        </div>
                        <div class="col-sm-2 no-padding-left">
                            <select class="form-control" id="" name="field_operator">
                                @CustomHelper.Get_Option(field_op_DDL, "", false)
                            </select>
                        </div>
                        <div class="col-sm-5 no-padding-left">
                            <input type="text" name="field_value" placeholder="" class="col-sm-12">
                        </div>
                        <div class="col-sm-2 no-padding-left">
                            <button class="btn btn-danger btn-sm">
                                <i class="ace-icon fa fa-trash-o bigger-130"></i>
                                刪除
                            </button>
                        </div>
                    </div>
                </div>

            </div>

            <div class="modal-footer">
                <a class="pull-left btn btn-sm btn-purple clear_query_all">
                    <span class="ace-icon fa fa-retweet"></span>
                    清空
                </a>

                <button id="query_jqGrid" class="btn btn-sm btn-primary" data-dismiss="modal">
                    <i class="ace-icon fa fa-check"></i>
                    查詢
                </button>
                <button class="btn btn-sm" data-dismiss="modal">
                    <i class="ace-icon fa fa-times"></i>
                    離開
                </button>
            </div>

        </div> <!-- modal-content end -->
    </div> <!-- modal-dialog end -->
</div>
<!-- Modal Content end -->

@{
    if (sLimitStr.Contains("E"))
    {
        <!-- 匯出CSV -->
        Html.Resource(@<script>
                           jQuery(function ($) {
                               // Click 匯出csv
                               $('#exportToCsv').click(function (e) {

                                   let data = Get_Jqgrid_Data()

                                   let json = data.json
                                   let header = data.header

                                   let csvString = JsonToCsvString(json, header)

                                   let fileName = $('#title-prg_name').text()

                                   Download(csvString, fileName)

                                   //JSONToCSVConvertor(csvData.json, fileName, csvData.header);
                               })

                               // 取得 jqgrid 資料 ( return { json, header } )
                               function Get_Jqgrid_Data() {
                                   //
                                   let gridData = $('#@grid_id').jqGrid('getGridParam', 'data')

                                   // 這個方法會取到某些多餘的欄位名稱
                                   //let colNames = $('#@grid_id').jqGrid('getGridParam','colNames')

                                   let colModel = $('#@grid_id').jqGrid('getGridParam', 'colModel')

                                   // 篩選 gridData
                                   let hiddenKeys = colModel.filter(x => x.hidden == true).map(x => x.name)
                                   gridData.forEach(function (item) {
                                       // 移除 在colModel中hidden為true的欄位
                                       hiddenKeys.forEach(function (key, index) {
                                           delete item[key]
                                       })

                                       // 移除 功能欄位
                                       delete item['myac']

                                       // 移除jgrid內建的rowId
                                       delete item['_id_']

                                       // 欄位值為 null / undefined 轉換成空字串
                                       for (let col in item) {
                                           if (item.hasOwnProperty(col)) {
                                               if (item[col] === null || typeof item[col] === 'undefined') {
                                                   item[col] = ''
                                               }
                                           }
                                       }

                                   })

                                   // 取得 中文標頭
                                   let headerKeys = colModel.filter(function (item) {
                                       // 隱藏的欄位
                                       if (item.hidden) {
                                           return false
                                       }
                                       // jqgrid 的 checkbox 和 subgrid
                                       let ignoreNames = ['cb', 'subgrid']
                                       if (ignoreNames.includes(item.name)) {
                                           return false
                                       }
                                       // 按鈕功能的欄位
                                       if (item.formatter == 'actions') {
                                           return false
                                       }
                                       return true
                                   }).map(x => x.name)
                                   let headerNames = headerKeys.map(key => $('#jqgh_@(grid_id)_' + key).text())

                                   let sJson = JSON.stringify(gridData)

                                   return {
                                       header: headerNames,
                                       json: sJson
                                   }
                               }

                               // json 轉換成 csv string
                               function JsonToCsvString(JSONData, CustomHeader, ShowHeader) {
                                   // 參數預設
                                   if (typeof CustomHeader === 'undefined') {
                                       CustomHeader = []
                                   }
                                   if (typeof ShowHeader === 'undefined') {
                                       ShowHeader = true
                                   }

                                   // parse json if json is not object
                                   var arrData = typeof JSONData != 'object' ? JSON.parse(JSONData) : JSONData;

                                   var CSV = '';

                                   // Set CSV Header
                                   if (ShowHeader) {
                                       var row = "";
                                       let headerKeys = []

                                       // 以第一筆資料的keys當作header (如果有資料)
                                       if (arrData.length > 0) {
                                           headerKeys = Object.keys(arrData[0])
                                       }

                                       // 自訂義header (一般將keys替換成中文，依照陣列的index順序)
                                       if (CustomHeader.length > 0) {
                                           //
                                           if (headerKeys.length > 0) {
                                               for (let i = 0; i < headerKeys.length && i < CustomHeader.length; i++) {
                                                   headerKeys[i] = CustomHeader[i]
                                               }
                                           } else {
                                               // json data is empty
                                               headerKeys = CustomHeader
                                           }
                                       }

                                       // 分列
                                       for (let i = 0; i < headerKeys.length; i++) {
                                           row += headerKeys[i] + ',';
                                       }

                                       // remove the last comma
                                       row = row.slice(0, -1);

                                       // 分行
                                       CSV += row + '\r\n';

                                   }

                                   // Set CSV Body
                                   //1st loop is to extract each row
                                   if (arrData.length > 0) {
                                       for (var i = 0; i < arrData.length; i++) {
                                           var row = "";

                                           //2nd loop will extract each column and convert it in string comma-seprated
                                           for (var index in arrData[i]) {
                                               row += '"' + arrData[i][index] + '",';
                                           }

                                           // remove the last comma
                                           row = row.slice(0, -1);

                                           //add a line break after each row
                                           CSV += row + '\r\n';
                                       }
                                   }

                                   return CSV
                               }

                               // 執行下載
                               function Download(csvString, fileName) {
                                   let uri = ''
                                   let BOM = "\uFEFF"
                                   if (window.Blob && window.URL && window.URL.createObjectURL) {
                                       let blob = new Blob([BOM + csvString], { type: 'text/csv;charset=gb2312;' })
                                       uri = URL.createObjectURL(blob)
                                   } else {
                                       uri = 'data:attachment/csv;charset=utf-8,' + BOM + encodeURIComponent(csvString);
                                   }

                                   var link = document.createElement("a");
                                   link.href = uri;
                                   link.style = "visibility:hidden";
                                   link.download = fileName + ".csv";

                                   document.body.appendChild(link);
                                   link.click();
                                   document.body.removeChild(link);
                               }
                           })

        </script> , "js");
    }
}



@Html.Resource(@<script typeof="text/javascript">
   jQuery(function ($) {

        /* 以下是查詢視窗的 script */
        // 點擊查詢按鈕 autofocus input
        $('#query_btn').click(function () {
            // 直接用 $('input[name="field_valugrid_pager"]').focus() 沒有作用
            setTimeout(function () {
                $('input[name="field_value"]').focus()
            }, 0);
        })


        // 清空條件
        $('#modal-form').find('.clear_query_all').click(function () {
            $('#query_sql_div').empty()
        })

        // 清除上一個條件
        $('#modal-form').find('.clear_query_last').click(function () {
            $('#query_sql_div').children().last().remove()
            $('input[name="field_value"]').focus()
        })

        // 點擊刪除
        $('#query_sql_div').on('click', 'button', function () {
            $(this).closest('.row').remove()
        })

        // 點擊查詢類別
        $('#modal-form').find('input[name="query_type"]').click(function () {
            // 預設一個欄位
            $('#query_sql_div').empty()
            let newRow = Get_NewRow()
            $('#query_sql_div').append(newRow)
            $('input[name="field_value"]').focus()
        })

        // 新增查詢條件
        $('#modal-form').find('.add_query').click(function () {
            let newRow = Get_NewRow()
            $('#query_sql_div').append(newRow)
            $('input[name="field_value"]').focus()
        })

        // 欄位下拉
        $('#query_sql_div').on('change', 'select', function () {
            $('#modal-form').find('input[name="field_value"]').focus()
        })

        // 點擊查詢
        $('#query_jqGrid').on('click', function () {
            let query_type = $('input[name="query_type"]:checked').val()
            let grid_state = getGridState('@grid_id')

            // 如果localStorage沒有資料，但是點選保留或已查詢
            if (!localStorage.getItem(queryStateKey)) {
                if (["KEEP", "IN"].includes(query_type.toUpperCase())) {
                    alert('請先選擇新查詢! ')
                    $('button[id="query_jqGrid"]').removeAttr('data-dismiss')
                    return;
                } else {
                    $('button[id="query_jqGrid"]').attr('data-dismiss', 'modal')
                }
            }

            //  儲存查詢條件
            let current_queryData = Get_QueryData()
            Set_QueryDatas(current_queryData)

            // 如果是新查詢，頁數回到第一頁
            if (query_type == 'NEW') {
                grid_state.page = 1
                setGridState("@grid_id", grid_state)
            }

            // 刷新jqgrid
            refreshGrid()
        })


        @* 和C# Razor 有關的變數 *@
        let queryStateKey = "query_datas_@sPrgCode"

        let fieldOptions = `@CustomHelper.Get_Option(query_DDL, "", false)`
        let operatorOptions = `@CustomHelper.Get_Option(field_op_DDL, "", false)`

        // 查詢狀態操作
        function Set_QueryState(data){
            if (!data){
                return
            }
            try{
                let saveString = JSON.stringify(datas)
                localStorage.setItem(queryStateKey, saveString)
            }catch(e){
                console.log(e.message)
            }
        }

        function Get_QueryState(){
            let current = localStorage.getItem(queryStateKey)
            return current
        }

        function Del_QueryState(){
            let current = localStorage.getItem(queryStateKey)
            if (current){
                return
            }
            localStorage.removeItem(queryStateKey)
            return current
        }

        // 預設查詢狀態
        if (Get_QueryState()) {
            // 取得localStorage的資料
            let query_datas = JSON.parse(Get_QueryState())
            let last_query = {};
            if (query_datas.length > 0) {
                last_query = query_datas[query_datas.length - 1];
                let query_type = last_query.query_type
                let query_conditions = last_query.query_conditions
                // 預設查詢狀態
                // 查詢類別
                $('#modal-form').find('input[name="query_type"]').each(function () {
                    if ($(this).val() == query_type) { $(this).prop("checked", true) }
                })

                // 清空條件
                $('#query_sql_div').empty()
                // 預設查詢欄位
                for (let i = 0; i < query_conditions.length; i++) {
                    let query_row = Get_QueryRow(query_conditions[i])
                    $('#query_sql_div').append(query_row)
                }
                // 預設查詢狀態 end
            }
        }

        //取得畫面上目前的查詢條件
        function Get_QueryData() {
            // 取得查詢類別
            let query_type = $('input[name="query_type"]:checked').val()

            // 設這查詢條件 陣列
            let query_conditions = []
            $('#query_sql_div').find('.row').each(function () {
                let field_code = $(this).find('select[name="field_code"]').val()
                let field_operator = $(this).find('select[name="field_operator"]').val()
                let input = $(this).find('input[name="field_value"]').val()
                let data = {
                    field_code: field_code,
                    field_operator: field_operator,
                    field_value: input
                };
                if (field_code) {
                    query_conditions.push(data)
                }
            })
            let query_data = {
                query_type: query_type,
                query_conditions: query_conditions
            }
            return query_data
        }

        // 儲存查詢條件
        function Set_QueryDatas(query_data) {
            let query_datas = []
            // 如果localStorage沒有資料或是空字串
            if (!Get_QueryState()) {
                query_datas.push(query_data)
                Set_QueryState(query_datas)
            } else {
                // 新查詢，直接覆蓋localStorage資料
                if (query_data.query_type.toUpperCase() == "NEW") {
                    query_datas.push(query_data)
                    Set_QueryState(query_datas)
                } else {
                    // 增加查詢資料
                    query_datas = JSON.parse(Get_QueryState())
                    query_datas.push(query_data)
                    Set_QueryState(query_datas)
                }
            }
        }

        // 取得新的條件列
        function Get_NewRow() {
            let newRow = $(`
                <div class="row">
                    <div class="space-6"></div>
                    <div class="col-sm-3" >
                        <select class="form-control" id="" name="field_code">
                            ${fieldOptions}
                        </select>
                    </div>
                    <div class="col-sm-2 no-padding-left">
                        <select class="form-control" id="" name="field_operator">
                            ${operatorOptions}
                        </select>
                    </div>
                    <div class="col-sm-5 no-padding-left" >
                        <input type="text" name="field_value" placeholder="" class="col-sm-12">
                    </div>
                    <div class="col-sm-2 no-padding-left">
                        <button class="btn btn-danger btn-sm">
                            <i class="ace-icon fa fa-trash-o propsinamegger-130"></i>
                            刪除
                        </button>
                    </div>
                </div>
            `)
            return newRow
        }

        // 取得新的條件列 (設置資料)
        function Get_QueryRow(field_data) {
            let newRow = Get_NewRow()
            // 欄位參數
            newRow.find('select[name="field_code"]').children().each(function () {
                if ($(this).val() == field_data.field_code) {
                    $(this).prop("selected", true)
                    return;
                }
            })
            // 邏輯運算子
            newRow.find('select[name="field_operator"]').children().each(function () {
                if ($(this).val() == field_data.field_operator) {
                    $(this).prop("selected", true)
                    return;
                }
            })
            // 欄位值
            newRow.find('input[name="field_value"]').val(field_data.field_value)
            return newRow
        }

        /* 以上是查詢視窗的 script */




        /* 以下是jqgrid 的 script */
        // 初始變數和其他
        let grid_selector = "#@grid_id";
        let pager_selector = "#@grid_pager";
        let parent_column = $(grid_selector).closest('[class*="col-"]');

        @* 和C# Razor 有關的變數 *@

        // jqGrid選項
        let sEnableRowFilter = "@sEnableRowFilter"  // 控制在表頭的欄位篩選 (row filter)
        let sIsMultiselect = "@sIsMultiselect"  // 使否多選
        let page_count = '@sPageCount'
        let actionColWidth = 75 + 30*@addBtnsInActionCol.Count;

        /* jqGrid 的資料來源和欄位 */
        let getDataUrl = `@sGetDataUrl`
        let updateUrl = `@sUpdateUrl`
        let deleteUrl = `@sDeleteUrl`

        let chkInsUrl = `@sChkInsUrl`
        let chkUpdUrl = `@sChkUpdUrl`
        let chkDelUrl = `@sChkDelUrl`

        let modelKey = '@key';
        let columnData = @Html.Raw(Json.Encode(ColumnInfoList));
        let dt_hiddenSettings = @Html.Raw(JsonConvert.SerializeObject(dt_hiddenSettings))  // array

        // 將columnData轉換成jqgrid的colModel
        let jqgrid_colModel = [
            {
                label: '(功能)',
                name: 'myac', index: '', width: 80, fixed: true, sortable: false, resize: false, search: false,
                //sorttype: function (cellValue, obj) {
                //    return obj.groupOrder
                //},
                formatter: 'actions',
                formatoptions: {
                    keys: true,
                    onSuccess: function () {
                        refreshGrid()
                    },
                    @if(sLimitStr.Contains("D") && !(bool)ViewBag.pDisableDelButton)
                        {
                            <text>delbutton: true,</text>
                        }else
                    {
                        <text>delbutton: false,</text>
                    }
                    @if (sLimitStr.Contains("M") && !(bool)ViewBag.pDisableEditButton)
                    {
                        <text>editbutton: true,</text>
                    }else
                    {
                            <text>editbutton: false,</text>
                    }
                    //
                    onEdit: function (rowId) {

                        if (typeof Jqgrid_OnInlineEdit === 'function') {
                            Jqgrid_OnInlineEdit(rowId)
                        }

                    },
                    // 明細刪除
                    delOptions: {
                        recreateForm: true,
                        beforeShowForm: beforeDeleteCallback,
                        url: "@sDeleteUrl",
                        mtype: 'post',
                        delData: {
                            "pTkCode": function () {
                                //Get data from selected row
                                let rowId = jQuery(grid_selector).jqGrid('getGridParam', 'selrow');
                                let data = jQuery(grid_selector).jqGrid('getRowData', rowId);
                                return data['@key'];
                            }
                        },
                        afterSubmit: function (response, postdata) {  //明細刪除後
                            console.log('afterSubmit')
                            console.log(response)
                            console.log(postdata)

                            refreshGrid()

                            return [true]
                        }

                    }, // end of delOptions
                } // end of formatoptions
            } // end of first object in array
        ] // end of jqgrid_colModel

        @* 處理colModel options *@
        jqgrid_colModel = jqgrid_colModel.concat(columnData.map(function(item, index){
            let props = {
                name: item.name,
                index: item.name,
                hidden: item.hidden,
                editable: item.editable,
                editrules: {
                    required: item.required
                },
                editoptions: {
                    readonly: item.readonlyattr ? true : false
                },
                width: 100
            }

            //foreign key
            if (item.name === '@pForeignKey') {
                props.editoptions.defaultValue = '@pTkCode'
            }

            // 資料自帶的表頭
            if (item.displayName){
                props.label = item.displayName
            }

            // 資料格式
            if (item.dataType) {
                switch (item.dataType.toLowerCase()) {
                    case 'currency':  //貨幣格式
                        // 靠右
                        props.align = 'right'

                        // 千分位
                        props.formatter = 'integer'
                        props.formatoptions = { thousandsSeparator: "," }
                        break
                    case 'checkbox':  // Y/N
                        let checkbox_options = { edittype: "checkbox", sortable: false, editoptions: { value: "Y:N" }, unformat: aceSwitch }
                        $.extend(props, checkbox_options)
                        break
                    case 'date':  // yyyy/mm/dd
                        let date_options = { sorttype: "date", unformat: pickDate }
                        $.extend(props, date_options)
                        break
                    case 'select':
                        break
                    default:
                        break
                }

                //select
            }

            // group summary
            if (item.name == "@sGroupFieldRelTextCode") {
                let o = {
                @* 分類修改點 向下 顯示名稱 *@
                //summaryTpl: '<b>製程ABC名稱: {0}</b>',
                summaryType: function (v, cn, record) {
                    var fieldData = record[cn]
                    return fieldData
                    //return v === "" ? fieldData : fieldData + v;
                },
                @* 分類修改點 向上 *@
                editrules: { edithidden: true }
            }
                $.extend(props, o)
            }
            if (item.name == '@sGroupField') {
                props.sorttype = function (cellValue, obj) {
                    //console.log(obj)
                    return obj._id;
                    //return obj.groupOrder;
                }
            }

            return props
        }))

        //
        let jqgrid_colModel_map = {}
        jqgrid_colModel.forEach((item, index) => {
            if (!jqgrid_colModel[item.name]) {
                jqgrid_colModel_map[item.name] = index
            }
        })

        @{
            foreach(string name in dropdowns.Keys)
            {
                <text>var select_values = ":---請選擇---"</text>
                List<DDLList> list = dropdowns[name];
                //如果直接輸出整個字串，字串太長在瀏覽器會斷行

                for (int i = 0; i < list.Count; i++)
                {
                    string show_type = list[i].show_type;
                    if (string.IsNullOrEmpty(show_type))
                    {
                        <text>select_values += ";" + "@list[i].field_code.Trim(): @list[i].field_code.Trim(): @list[i].field_name.Trim()" </text>
                    }
                    else
                    {
                        switch (show_type.ToUpper())
                        {
                        case "A":
                            <text>select_values += ";" + "@list[i].field_code.Trim(): @list[i].field_code.Trim(): @list[i].field_name.Trim()" </text>
                            break;
                        case "B":
                            <text>select_values += ";" + "@list[i].field_code.Trim(): @list[i].field_code.Trim()" </text>
                            break;
                        case "C":
                            <text>select_values += ";" + "@list[i].field_code.Trim(): @list[i].field_name.Trim()" </text>
                            break;
                        default:
                            <text>select_values += ";" + "@list[i].field_code.Trim(): @list[i].field_code.Trim(): @list[i].field_name.Trim()" </text>
                            break;
                        }
                    }

                }
                <text>
                    var i = jqgrid_colModel_map['@name']
                    $.extend(jqgrid_colModel[i], { edittype: "select", editoptions: { value: select_values } })
                </text>
            }
         }

        let jqgrid_colNames = jqgrid_colModel.map(function(item, index){
            if (item.label){
                return item.label
            }
            return item.name
        })

        // jqgrid 選項
        let default_options = {
            url: getDataUrl,
            mtype: "Post",
            datatype: "json",
            postData: {
            pTkCode: function () {
                    return "@pTkCode"
                },
                @Html.Raw(sPostDataJs)
            },
            height: 'auto',
            //height: 300,
            colNames: jqgrid_colNames,
            colModel: jqgrid_colModel,
            viewrecords: true,
            rowNum: page_count || 30,
            rowList: (function(){
                let list = [30, 50, 100]

                let x = parseInt(page_count)
                if (!x){
                    return list
                }

                if (!list.includes(x)){
                    list.push(x)
                    list.sort(function(a, b){
                        return a - b
                    })
                }
                return list
            })(),
            pager: pager_selector,
            shrinkToFit: false,  //
            altRows: true,
            //toppager: true,
            multiselect: sIsMultiselect === 'Y' ? true: false,  // 控制多選
            //multikey: "ctrlKey",
            multiboxonly: false,
            @* 分類修改點 向下 *@
            @if (isGroup)
            {
            <text>
            grouping: true,
            groupingView: {
                plusicon: "fa fa-plus",  // "ui-icon-circlesmall-plus"
                minusicon: "fa fa-minus", // "ui-icon-circlesmall-minus"
                groupField: ['@sGroupField'],
                groupSummary: [false],
                //groupCollapse : true,
                //groupColumnShow : [true],
                //groupDataSorted: false,
                groupText : ['<b> @sGroupFieldName: {0} - {@sGroupFieldRelTextCode}  ( {1} 筆資料 ) </b>'],
                //groupText : ['<b> 製程代碼: {0} - {work_name}  &emsp; ( {1} 筆資料 ) </b>'],
                groupOrder: ['asc']
            },
            </text>
            }
            @* 分類修改點 向上 *@
            loadonce: true,   // sort, change datatype to local
            loadComplete: function () {

                let $grid = $(this)

                let gridId = $grid.jqGrid('getGridParam', 'id')

                //
                loadStateAfterSetGrid(gridId)


                @* partial view 自訂義 *@
                @Html.Raw(customJs_loadComplete)

                //
                setTimeout(function () {
                    saveGridState(gridId)
                })

                var table = this;
                setTimeout(function () {
                    styleCheckbox(table);
                    updateActionIcons(table);
                    updatePagerIcons(table);
                    enableTooltips(table);
                }, 0);

                // 遍歷每列
                $(this).find(">tbody>tr.jqgrow").each(function(i){

                    let $row = $(this)
                    let rowId = $row.attr('id')
                    let rowData = $grid.jqGrid('getRowData', rowId)  // object

                    let $actionCell = $row.find(">td[aria-describedby$='myac']")  /* 功能欄位 */

                })



                // end of loadComplete
            },
            onSelectRow: function (rowid) {
                let id = $(this).jqGrid('getGridParam', 'id')
                saveGridState(id)
            },
            resizeStart: function (event, index) {
                // 讓最後一欄 可以resize
                // work around
                let colModel = $(this).jqGrid('getGridParam', 'colModel')

                let showCols = colModel.filter(x => !x.hidden)
                let curret_col = colModel[index]

                if (curret_col.name == showCols[showCols.length - 1].name) {
                    let current_gridWidth = $(this).jqGrid('getGridParam', 'width')
                    $(this).jqGrid('setGridWidth', 10000)
                }
            },
            resizeStop: function (width, index) {
                let id = $(this).jqGrid('getGridParam', 'id')
                saveGridState(id)

                //
                resetGridWidth($(this))
            },
            editurl: '@sUpdateUrl'  //明細修改
        }

        // 刪除資料前檢查 函數
        // async: false
        function chk_del_main(postData){
            let result = {
                succ: false,
                message: ''
            }
            $.ajax({
                async: false,
                method: 'post',
                url: chkDelUrl,
                data: postData,
                datatype: 'json',
                success: function (data) {
                    result.succ = data.isValid
                    result.message = data.message
                },
                error: function (xhr) {
                    console.log(xhr)
                    alert("刪除資料前檢查失敗!");
                }
            })
            return result
        }

        @* 修改點 向下 明細檔的新增資料檢查*@
        // beforeSubmit: function 存檔時檢查的函數
        function check_insert(postdata, formid) {
            let result = null;
            $.ajax({
                async: false,
                method: 'post',
                url: chkInsUrl,
                data: postdata,
                datatype: 'json',
                success: function (bool) {
                    result = [bool.bIsOK, bool.message]
                    //if (bool.bIsOK) {
                    //    result = [true, ""]
                    //} else {
                    //    alert("明細新增檢查失敗!");
                    //    //result = [false, "欄位: " + postdata.field_code + " 已存在!"]
                    //}
                },
                error: function () {
                    alert("明細新增檢查失敗!");
                    result = [true, '']
                }
            })
            return result;
        }
        @* 修改點 向上 *@

        // 設置調整的欄位順序、顯示、寬度
        // oGridState 基本上在localStorage
        function adjustOptionsWithState(oDefaultOptions, oGridState) {
            if (!oDefaultOptions) {
                console.error('adjustOptionsWithState 一定要傳入 default options.')
                return {}
            }

            if (!oGridState) {
                return oDefaultOptions
            }

            // deep copy default options
            let default_options = $.extend(true, {}, oDefaultOptions)

            let state_options = oGridState

            //
            let default_colModel = default_options.colModel
            let state_colModel = state_options.colModel

            let default_names = default_colModel.map(x => x.name)
            let state_names = state_colModel.map(x => x.name)

            // set width and hidden
            default_colModel.forEach((item, index) => {
                let colIdx = state_names.indexOf(item.name)
                if (colIdx > -1) {
                    item.width = state_colModel[colIdx].width
                    item.hidden = state_colModel[colIdx].hidden
                }
            })

            // remap columns index
            let remapColIdx = state_names.map(x => default_names.indexOf(x))

            // filter not exist col
            remapColIdx = remapColIdx.filter(x => x != -1)

            // 處理新增的欄位 (和state相比)
            let add_names = default_names.filter(x => state_names.indexOf(x) == -1)
            if (add_names.length > 0) {
                let addColIdx = add_names.map(x => default_names.indexOf(x))
                remapColIdx = addColIdx.concat(remapColIdx)
            }

            let remapColModel = remapColIdx.map(x => default_options.colModel[x])
            let remapColNames = remapColIdx.map(x => default_options.colNames[x])


            default_options.colModel = remapColModel
            default_options.colNames = remapColNames
            //default_options.rowNum = oGridState.rowNum

            return default_options
        }

        // 初始化jqgrid函數
        function init_jqGrid() {
            // 讀取儲存在db的欄位調整
            // ajax async: false
            loadStateInDB('@grid_id')
            loadStateInDB('@grid_id', true)


            // 調整狀態的的jqgrid
            let grid_state = getGridState('@grid_id')
            let changed_options = adjustOptionsWithState(default_options, grid_state)

            // 從db設定欄位隱藏
            var map = {}
            changed_options.colModel.forEach((item, index) => {
                if (!map[item.name]) {
                    map[item.name] = index
                }
            })
            dt_hiddenSettings.forEach((item, index) => {
                var index = map[item.field_code]
                if (typeof index !== 'undefined') {
                    if (item.is_hidden === 'Y') {
                        changed_options.colModel[index].hidden = true

                        // 隱藏時把必填關掉

                        if (changed_options.colModel[index].editrules) {
                            changed_options.colModel[index].editrules.required = false
                        } else {
                            changed_options.colModel[index].editrules = { required: false }
                        }
                        //changed_options.editrules.required = false
                    } else {
                        changed_options.colModel[index].hidden = false
                    }
                }
            })

            // call jqgrid
            jQuery(grid_selector).jqGrid(changed_options);

            // 拉動jqgrid本身的寬度，現在改為可以拉動最後一欄
            //jQuery(grid_selector).jqGrid('gridResize', {});

            // 表頭的個別欄位查詢
            if (sEnableRowFilter.toUpperCase() === 'Y') {
                jQuery(grid_selector).jqGrid('filterToolbar', {
                    stringResult: true,
                    searchOnEnter: false,
                    beforeSearch: function () {
                        let id = $(this).jqGrid('getGridParam', 'id')
                        saveGridState(id)
                    }
                });

                // set toolbar style
                setTimeout(function () {
                    let search_toolbar = $('#gbox_' + grid_selector.substring(1)).find('.ui-search-toolbar').eq(0)
                    // set height
                    search_toolbar.css('height', '4em')
                    // set input placeholder and autocomplete off
                    let labels = $('#gbox_' + grid_selector.substring(1)).find('.ui-jqgrid-labels').eq(0);
                    let colName = "";
                    search_toolbar.find('th').find('input').attr('autocomplete', 'off');
                    search_toolbar.find('th').each(function (i) {
                        colName = labels.find('th').eq(i).text();
                        $(this).find('input').attr('placeholder', '搜尋 ' + colName)
                    })
                })
            }

            // 表尾的按鈕
            if (1 > 0) {
                jQuery(grid_selector).jqGrid('navGrid', pager_selector,
                    {   //navbar options
                        edit: false,
                        editicon: 'ace-icon fa fa-pencil blue',
                        add: true,
                        addicon: 'ace-icon fa fa-plus-circle purple',
                        del: false,
                        delicon: 'ace-icon fa fa-trash-o red',
                        search: true,
                        searchicon: 'ace-icon fa fa-search orange',
                        refresh: true,
                        refreshicon: 'ace-icon fa fa-refresh green',
                        view: true,
                        viewicon: 'ace-icon fa fa-search-plus grey'
                    },
{
    //edit record form
    //closeAfterEdit: true,
    //width: 700,
    recreateForm: true,
    beforeShowForm: function (e) {
        var form = $(e[0]);
        form.closest('.ui-jqdialog').find('.ui-jqdialog-titlebar').wrapInner('<div class="widget-header" />')
        style_edit_form(form);
    }
},
 {
                    //new record form 明細新增記錄的form
                    //width: 700,
                    closeAfterAdd: true,
                    recreateForm: true,
                    refresh: true,
                    viewPagerButtons: false,
                    beforeShowForm: function (e) {
                        var form = $(e[0]);
                        form.closest('.ui-jqdialog').find('.ui-jqdialog-titlebar')
                        .wrapInner('<div class="widget-header" />')
                        style_edit_form(form)
                        $('input[name="is_use"]').attr('checked', 'checked') //預設是否使用為Y
                    },
                    afterShowForm: function(form) {
                        form.closest('div.ui-jqdialog').center();
                    },
                    beforeSubmit: check_insert, //明細新增前檢查
                    reloadAfterSubmit: true,
                    // .trigger('reloadGrid')
                    afterSubmit: function () {  //明細新增後
                        refreshGrid()
                        return [true, '']
                    },
                    url: "@sInsertUrl"
            },
{
    // del
    closeAfterEdit: true,
    recreateForm: true,
    beforeShowForm: function (e) {
        var form = $(e[0]);
        form.closest('.ui-jqdialog').find('.ui-jqdialog-titlebar').wrapInner('<div class="widget-header" />')
        style_edit_form(form);
    },
    afterSubmit: function () { $(this).jqGrid('setGridParam', { datatype: 'json' }); return [true, ""] }
},
{
    //search form
    recreateForm: true,
    afterShowSearch: function (e) {
        var form = $(e[0]);
        form.closest('.ui-jqdialog').find('.ui-jqdialog-title').wrap('<div class="widget-header" />')
        style_search_form(form);
    },
    afterRedraw: function () {
        style_search_filters($(this));
    }
,
    multipleSearch: true,
    /**
    multipleGroup:true,
    showQuery: true
    */
},
{
    //view record form
    recreateForm: true,
    beforeShowForm: function (e) {
        var form = $(e[0]);
        form.closest('.ui-jqdialog').find('.ui-jqdialog-title').wrap('<div class="widget-header" />')
        form.closest('.ui-jqdialog').center()
    },

    afterSubmit: function () { $(this).jqGrid('setGridParam', { datatype: 'json' }); return [true, ""] }
}
)
            }


            // nav custom btns
            jQuery(grid_selector)
                .jqGrid('navButtonAdd', pager_selector, {
                    caption: "",
                    title: "儲存欄位設定",
                    buttonicon: "ace-icon fa fa-floppy-o ",
                    onClickButton: function () {
                        let gridId = $(this).jqGrid('getGridParam', 'id')

                        saveStateInDB(gridId)
                    },
                    //position: "first"
                })
                .jqGrid('navButtonAdd', pager_selector, {
                    caption: "",
                    title: "欄位調整",
                    buttonicon: "ace-icon fa fa-table blue bigger-140",
                    onClickButton: function () {
                        let gridId = $(this).jqGrid('getGridParam', 'id')

                        CallColumnChooser(gridId)

                    },
                    //position: "first"
                })
                .jqGrid('navButtonAdd', pager_selector, {
                    caption: "",
                    title: "自動調整寬度 (100%)",
                    buttonicon: "fa fa-arrows-h grey",
                    onClickButton: function () {
                        let gridId = $(this).jqGrid('getGridParam', 'id')

                        $(this).jqGrid('setGridWidth', parent_column.width(), true);
                        saveGridState(gridId)
                    },
                    //position: "first"
                })
                .jqGrid('navButtonAdd', pager_selector, {
                    caption: "",
                    title: "自動調整寬度 (200%)",
                    buttonicon: "fa fa-arrows-h ",
                    onClickButton: function () {
                        let gridId = $(this).jqGrid('getGridParam', 'id')

                        $(this).jqGrid('setGridWidth', 2 * parent_column.width(), true);
                        saveGridState(gridId)
                    },
                    //position: "first"
                })
                .jqGrid('navButtonAdd', pager_selector, {
                    caption: "",
                    title: "還原預設欄位",
                    buttonicon: "fa fa-undo orange",
                    onClickButton: function () {
                        let gridId = $(this).jqGrid('getGridParam', 'id')

                        //
                        removeGridState(gridId)

                        //// remove state in db
                        function callback() {
                            history.go(0)
                        }
                        deleteStateInDB('@grid_id', callback)

                        // 有時重置會失敗 (不知道為什麼)
                        //$.jgrid.gridUnload(gridId)
                        //// default options
                        //init_jqGrid(true)

                        //// default adjust grid width
                        //$(grid_selector).jqGrid('setGridWidth', parent_column.width(), true);

                    },
                    //position: "first"
                })

        }  // end of init_jqGrid

        /*  */
        // 初始化jqgrid
        init_jqGrid()

        // 設定 columnchooser 的按鈕文字
        $.extend(true, $.ui.multiselect, {
            locale: {
                // addAll btn has problem
                addAll: '顯示全部',
                removeAll: '隱藏全部',
                itemsCount: '個選擇欄位'
            }
        });


        /* 以下是事件處理 */

        // window, document
        // ace 自帶的
        // resize on sidebar collapse/expand
        $(document).on('settings.ace.jqGrid', function (ev, event_name, collapsed) {
            if (event_name === 'sidebar_collapsed' || event_name === 'main_container_fixed') {
                //setTimeout is for webkit only to give time for DOM changes and then redraw!!!
                setTimeout(function () {
                    $(grid_selector).jqGrid('setGridWidth', parent_column.width());
                }, 20);
            }
        })

        // ace 自帶的
        //trigger window resize to make the grid get the correct size
        $(window).triggerHandler('resize.jqGrid');

        // 重整或離開當前頁面
        window.addEventListener("beforeunload", function (event) {
            // save grid state
            //saveGridState('@grid_id')
        });

        // 預設寬度是100%
        if (!getGridState('@grid_id')){
            $(grid_selector).jqGrid('setGridWidth', parent_column.width(), true);
        }

        // 自訂義按鈕
        // 儲存欄位設定
        $('#saveStateInDB').click(function () {
            saveStateInDB('@grid_id')
            saveStateInDB('@grid_id', true)
        })

        // 重置調整欄位
        $('#clearState').click(function () {
            if (!confirm('確定要還原嗎? (清除設定資料) ')) { return false }

            // remove state in localStorage
            removeGridState('@grid_id')
            removeGridState('@grid_id', true)

            // remove state in db
            deleteStateInDB('@grid_id')

            $.jgrid.gridUnload('@grid_id')

            // 有時候重置失敗，用setTimeout看看
            setTimeout(function () {
                // default options
                init_jqGrid()
            }, 100)

        })

        // 自動調整grid寬度 (100%)
        $('#fitPageWidth').click(function (e) {
            // set grid後callback
            //setTimeout(function () {
            //})
            $(grid_selector).jqGrid('setGridWidth', parent_column.width(), true);
            saveGridState('@grid_id')
        })

        // 自動調整grid寬度 (預設)
        $('#200pWidth').click(function (e) {
            $(grid_selector).jqGrid('setGridWidth', 2 * parent_column.width(), true);
            saveGridState('@grid_id')
            // set grid後callback
            //setTimeout(function () {
            //})
            //default_options.colModel.forEach((item, index) => {
            //    $(grid_selector).jqGrid('setColWidth', item.name, item.width);
            //})
        })

        // 主檔欄位調整
        $('#columnChooser').click(function () {
            CallColumnChooser('@grid_id')
        })

        //// 明細欄位調整
        //$('#sub_columnChooser').click(function () {
        //    CallColumnChooser('@grid_id', true)
        //})

        // columnchooser add all bug
        // 點擊remove all後 add all沒有作用
        // 硬改，在capture階段 點擊add all 阻止原本的事件 觸發每個欄位的click
        $("body")[0].addEventListener('click', function (e) {
            let path = e.path
            let selector = []
            // 過濾 html, document, window
            for (let i = 0; i < path.length - 3; i++) {
                if (path[i].classList) {
                    if (path[i].classList.contains('add-all')) {
                        selector.push(i)
                    }
                }
                if (path[i].id) {
                    if (path[i].id.includes('colchooser')) {
                        selector.push(i)
                    }
                }
            }
            // 檢查selector 順序
            let chk_order = selector.every(function (currentValue, index, array) {
                let nextValue = array[index + 1]
                if (typeof nextValue !== 'undefined') {
                    return currentValue < nextValue
                } else {
                    return true
                }
            })
            // callback
            if (selector.length == 2 && chk_order) {
                e.stopPropagation()
                $('[id^=colchooser]').find('.available').find('.action').click()

                //$('[id^=colchooser]').find('.available').find('.action').each(function (i) {
                //    let self = $(this)
                //    setTimeout(function () {
                //        self.click()
                //    }, 50*i)
                //})
            }
        }, true);

        // columnchooser remove all bug
        // 第一次 點擊remove all後 無法加回去，但是關掉再打開就沒問題，後來發現發現問題是select取到的值是null
        // 當select改變就設值
        $('body').on('DOMSubtreeModified', '[id^=colchooser] > div > select[multiple] ', function (e) {
            let $select = $('[id^=colchooser]').find('select[multiple="multiple"]')
            let multi_val = []

            $select.find('option').each(function (e) {
                if (typeof $(this).attr('selected') !== 'undefined') {
                    multi_val.push($(this).attr('value'))
                }
            })
            $select.val(multi_val)
        })

        /* 以上是事件處理 */



        /* 以下是自訂義的函數 (for jqgrid)  */

        // 儲存狀態 (DB)
        // ajax async: false
        function saveStateInDB(gridId, IsSubgrid) {
            try {
                let current_state
                if (IsSubgrid === true) {
                    current_state = getGridState(gridId, true)
                } else {
                    current_state = getGridState(gridId)
                }

                if (current_state == null) {
                    //if (IsSubgrid === true) {
                    //    alert('尚未設定明細欄位。 ')
                    //} else {
                    //    alert('尚未設定主檔欄位。 ')
                    //}
                    return
                }

                if (current_state !== null) {
                    //alert('開始儲存設定，請稍後...。 ')
                }

                // 篩選要儲存的資料
                let save_state = {}
                let selectedParams = ['colModel', 'colNames']

                let keys = Object.keys(current_state)
                selectedParams.forEach((item, index) => {
                    if (keys.includes(item)) {
                        save_state[item] = current_state[item]
                    }
                })

                // filter colModel props
                let colModel_filterProps = ['name', 'width', 'hidden']
                let filterColModel = []
                save_state.colModel.forEach((item) => {
                    let o = {}
                    colModel_filterProps.forEach((prop) => {
                        o[prop] = item[prop]
                    })
                    filterColModel.push(o)
                })

                save_state.colModel = filterColModel

                $.ajax({
                    async: false,
                    method: 'post',
                    url: '/jqgrid/SaveState',
                    data: {
                        pUrlPath: location.pathname,
                        pGridId: gridId,
                        pJsonState: JSON.stringify(save_state),
                        pIsSubgrid: IsSubgrid === true ? "Y" : ""
                    }
                }).done(function () {
                    //
                    if (IsSubgrid === true) {
                        //alert('儲存明細欄位設定成功! ')
                    } else {
                        alert('儲存設定成功! ')
                    }
                })
            } catch (e) {
                console.log(e)
            }

            return save_state

        }

        // 取得狀態 (DB)
        // ajax async: false
        // get state in db and set it to localStorage
        function loadStateInDB(gridId, IsSubgrid) {
            try {
                $.ajax({
                    async: false,
                    method: 'get',
                    url: '/jqgrid/GetState',
                    data: {
                        pUrlPath: location.pathname,
                        pGridId: gridId,
                        pIsSubgrid: IsSubgrid === true ? "Y" : ""
                    }
                }).done(function (data) {
                    //
                    if (data) {
                        let saved_state = JSON.parse(data)
                        if (IsSubgrid === true) {
                            let current_state = getGridState(gridId, true)

                            // merge current and saved state
                            $.extend(current_state, saved_state)

                            localStorage.setItem(`subjqGrid_@(grid_id)_${location.pathname}`, JSON.stringify(current_state))
                        } else {
                            let current_state = getGridState(gridId)

                            // merge current and saved state
                            $.extend(current_state, saved_state)

                            localStorage.setItem(`jqGrid_@(grid_id)_${location.pathname}`, JSON.stringify(current_state))
                        }

                    }
                })
            } catch (e) {
                console.log(e)
            }
        }

        // 刪除狀態 (DB)
        function deleteStateInDB(gridId, callback) {
            try {
                $.ajax({
                    method: 'post',
                    url: '/jqgrid/DeleteState',
                    data: {
                        pUrlPath: location.pathname,
                        pGridId: gridId
                    }
                }).done(function () {
                    //alert('清除設定成功! ')
                    if (typeof callback === 'function') {
                        callback()
                    }
                })
            } catch (e) {
                console.log(e)
            }
        }

        // 呼叫columnchooser函數
        function CallColumnChooser(gridId, isSubgrid) {
            let grid_selector
            if (isSubgrid === true) {
                grid_selector = `table[id^="${gridId}_"]`
            } else {
                grid_selector = '#' + gridId
            }
            let $grid = $(grid_selector)

            if ($grid.length > 0) {
                $grid.jqGrid('columnChooser', {
                    modal: true,
                    done: function (perm) {
                        if (perm) {
                            // remapColumns會改變原本的colModel順序
                            // params => permutation: array, updateCells: bool, keepHeader: bool
                            this.jqGrid("remapColumns", perm, true, false);


                            let id = this.jqGrid("getGridParam", 'id');
                            saveGridState(id, isSubgrid)

                            //
                            resetGridWidth(this)

                        }
                    }
                })
            } else {    // 畫面上沒有jqgrid
                if (isSubgrid === true){
                    msg = '請打開明細! '
                } else {
                    msg = '沒有資料! '
                }

                alert(msg)
            }

        }

        // 儲存狀態 (localStorage)
        function saveGridState(gridId, isSubgrid) {
            let $grid = $('#' + gridId)
            if (!$grid) {
                return {}
            }

            // $.jgrid.saveState方法存在localStorage的key只用grid id識別，應該會跟其他頁面有同樣id的grid的儲存狀態互相覆蓋
            let state = $.jgrid.saveState(gridId, {
                useStorage: false
            });  // return string

            let currentState = null
            try {
                currentState = JSON.parse(state)
            } catch (e) {
                console.log(e)
                return {}
            }

            // 移除 $.jgrid.saveState 自己儲存的state
            localStorage.removeItem(`jqGrid${gridId}_data`)
            localStorage.removeItem(`jqGrid${gridId}`)

            // remove local data in state ( too large beyond localStorage limit )
            delete currentState.data

            if (isSubgrid === true) {

                let parseId = gridId.split('_')[0]

                let saveKey = `subjqGrid_${parseId}_${location.pathname}`

                localStorage.setItem(saveKey, JSON.stringify(currentState))
            } else {
                // expand subgrid
                let expandSubGridIds = [];
                $grid.find("tr:has(.sgexpanded)").each(function () {
                    expandSubGridIds.push($(this).attr('id'));
                });
                currentState['expandSubGridIds'] = expandSubGridIds

                //
                let savedState = getGridState(gridId)

                let currentPageRowIds = []
                $grid.find("tr.jqgrow").each(function () {
                    currentPageRowIds.push($(this).attr('id'));
                })

                if (savedState) {
                    // selarrrow
                    if (savedState.selarrrow) {
                        // 當前頁面 + 當前頁面以外的 (已儲存的)
                        let addSelarrow = savedState.selarrrow.filter(x => !currentPageRowIds.includes(x))
                        currentState.selarrrow = currentState.selarrrow.concat(addSelarrow)
                    }

                    // expand subgrid
                    if (savedState.selarrrow) {
                        // 當前頁面 + 當前頁面以外的 (已儲存的)
                        let addExpandSubGridIds = savedState.expandSubGridIds.filter(x => !currentPageRowIds.includes(x))
                        currentState.expandSubGridIds = currentState.expandSubGridIds.concat(addExpandSubGridIds)
                    }
                }


                let saveKey = `jqGrid_${gridId}_${location.pathname}`
                localStorage.setItem(saveKey, JSON.stringify(currentState))

            }

            return currentState
        }

        // 取得狀態 (localStorage)
        function getGridState(gridId, isSubgrid) {
            // 預設gridId為@grid_id
            var args = Array.prototype.slice.call(arguments)
            if (typeof args[0] !== 'string') {
                gridId = '@grid_id'
            }

            let key = ''
            if (isSubgrid === true) {
                let parseId = gridId.split('_')[0]
                key = `subjqGrid_${parseId}_${location.pathname}`
            } else {
                key = `jqGrid_${gridId}_${location.pathname}`
            }

            let state = localStorage.getItem(key)

            if (!state) {
                return null
            }

            try {
                return JSON.parse(state)
            } catch (e) {
                return null  // null
            }
        }

        // 刪除狀態 (localStorage)
        function removeGridState(gridId, isSubgrid) {
            // 預設gridId為@grid_id
            var args = Array.prototype.slice.call(arguments)
            if (typeof args[0] !== 'string') {
                gridId = '@grid_id'
            }

            let key = ''
            if (isSubgrid === true) {
                key = `subjqGrid_${gridId}_${location.pathname}`
            } else {
                key = `jqGrid_${gridId}_${location.pathname}`
            }

            let state = localStorage.getItem(key)
            localStorage.removeItem(key)
            return state
        }

        // 儲存jqgrid狀態
        function setGridState(gridId, state, isSubgrid) {
            // 預設gridId為@grid_id
            var args = Array.prototype.slice.call(arguments)
            if (typeof args[0] !== 'string') {
                gridId = '@grid_id'
            }

            let key = ''
            if (isSubgrid === true) {
                key = `subjqGrid_${parseId}_${location.pathname}`
            } else {
                key = `jqGrid_${gridId}_${location.pathname}`
            }

            localStorage.setItem(key, JSON.stringify(state))
        }

        // 設置jqgrid狀態 (在jqgrid初始化後)
        // 放在 loadComplete (jqgrid event) 裡
        function loadStateAfterSetGrid(gridId) {
            //let grid_selector = `table[id^="${gridId}"]`

            let $grid = $('#' + gridId)
            let data = getGridState(gridId)
            if (!data) {
                return
            }


            // selrow
            if (data.selarrrow) {
                data.selarrrow.forEach((item, index) => {
                    $grid.jqGrid('setSelection', item, false);
                })
            }
            // 會出錯: Cannot read 'styleUI' of undefined
            //if (data.selrow) {
            //    if (!data.selarrrow || data.selarrrow.length == 0) {
            //        $grid.jqGrid('setSelection', data.selrow, false);
            //    }
            //}

            // filters
            if ($grid.jqGrid("getGridParam", "datatype") === "json") {
                if (data.postData) {
                    //
                    setTimeout(function () {

                        let localPostData = {
                            nd: data.postData.nd,
                            page: data.postData.page,
                            rows: data.postData.rows,
                            sidx: data.postData.sidx,
                            sord: data.postData.sord,
                            filters: data.postData.filters
                        }

                        $grid.jqGrid('setGridParam', {
                            page: data.page,
                            //sortname: data.sortname,
                            //sortorder: data.sortorder,
                            search: data.search,
                            postData: localPostData
                        })

                        @* 同時卡C#的設置 *@
                        @if (isGroup) {
                        <text>
                            // work around 資料沒有正確分類
                            if (data && data.grouping)
                            {
                                // 不知道為什麼跳出錯誤: Cannot read property 'groupingView' of undefined
                                if (data.groupingView)
                                {

                                // 設置{ groupOrder: null }解決排序問題 (原本只會自動依照groupField排序，但是這裡希望照原始資料的順序排序)
                                // 這樣在新增、修改或刪除時會出錯
                                //$grid.jqGrid('groupingGroupBy', data.groupingView.groupField[0], { groupOrder: null });
                                $grid.jqGrid('groupingGroupBy', data.groupingView.groupField[0]);

                                    //直接寫死也一樣出錯，上面groupingGroupBy確定有作用
                                    //console.log('grouping')
                                    //$grid.jqGrid('groupingGroupBy', 'work_code');
                                    //console.log('grouping end')
                                }
                            }
                        </text>
                        }


                        $grid.trigger("reloadGrid")
                    })
                }

            }

            // expand subgrid
            if (data.expandSubGridIds) {
                // 上面的reload會重複打開subgrid (重複發送抓subgrid data的ajax)
                // 設置setTimeout 在reloadGrid後
                setTimeout(function () {
                    data.expandSubGridIds.forEach((item, index) => {
                        $grid.jqGrid('expandSubGridRow', item);
                    })
                }, 10)
            }

            // toolbar (內建的篩選條件為"開頭是")
            if (data.postData && data.postData.filters) {
                let filters = typeof (data.postData.filters) === 'string' ? JSON.parse(data.postData.filters) : data.postData.filters
                let rules_bw = filters.rules.filter(x => x.op == 'bw')
                rules_bw.forEach((item, index) => {
                    $('.ui-search-toolbar').find("input[name=" + item.field + "]").val(item.data)
                })
            }


        }   // end of loadState function

        // 重新計算jqgrid寬度 (有顯示的欄位)
        function resetGridWidth($grid) {
            if (!$grid) { return; }
            // reset grid width
            // column chooser在隱藏欄位時會自己計算，但是顯示欄位時不會
            let colModel = $grid.jqGrid("getGridParam", 'colModel');
            let gridWidth = colModel.filter(x => !x.hidden).map(x => x.width).reduce((a, b) => a + b, 0)
            $grid.jqGrid("setGridWidth", gridWidth);
        }



        // 刷新jqgrid
        function refreshGrid($grid) {
            // 預設: #@grid_id
            if (!$grid) {
                $grid = $('#@grid_id')
            }

            //// 刷新group
            //let grouping = $('#@grid_id').jqGrid("getGridParam").grouping
            //let groupingView = $('#@grid_id').jqGrid("getGridParam").groupingView
            //let groupField = groupingView.groupField[0]  //假設單一分類
            //if (grouping && groupField) {
            //    //$grid.jqGrid('groupingRemove');
            //    $grid.jqGrid('groupingGroupBy', groupField);
            //}

            $grid.jqGrid('setGridParam', { datatype: 'json' }).trigger('reloadGrid')
        }

        /* 以上是自訂義的函數 (for jqgrid) */


        /*  ace-admin  */
        //switch element when editing inline
        function aceSwitch(cellvalue, options, cell) {
            setTimeout(function () {
                $(cell).find('input[type=checkbox]')
                    .addClass('ace ace-switch ace-switch-5')
                    .after('<span class="lbl"></span>');
            }, 0);
        }
        //enable datepicker
        function pickDate(cellvalue, options, cell) {
            setTimeout(function () {
                $(cell).find('input[type=text]')
                    .attr('autocomplete', 'off')
                    .datepicker({ format: 'yyyy/mm/dd', autoclose: true, language: 'zh-TW' });
            }, 0);
        }

        function style_edit_form(form) {

            //don't wrap inside a label element, the checkbox value won't be submitted (POST'ed)
            //.addClass('ace ace-switch ace-switch-5').wrap('<label class="inline" />').after('<span class="lbl"></span>');

            @* 讓明細新增時的form也有 checkbox or datepick *@
            @foreach(var props in ColumnInfoList)
            {
                switch (props.dataType.ToLower())
                {
                    case "checkbox":
                        <text>form.find('input[name=@props.name]').addClass('ace ace-switch ace-switch-5').after('<span class="lbl"></span>');</text>
                        break;
                    case "date":
                        <text>form.find('input[name=@props.name]')
                                    .attr('autocomplete', 'off')
                .datepicker({ format: 'yyyy/mm/dd', autoclose: true, language: 'zh-TW' });</text>
                        break;
                    default:
                        break;
                }
            }
            

            //var div = form.closest('#editmodgrid-table')
            //div.css({
            //    zIndex: 0,
            //    'overflow': 'visible',
            //})

            //form.find('select').each(function(){
            //    $(this).chosen()
            //    $(this).next().css('width', '80%')
            //    $(this).attr('style', 'chosen-select')
            //})

    //update buttons classes
    var buttons = form.next().find('.EditButton .fm-button');
    buttons.addClass('btn btn-sm').find('[class*="-icon"]').hide();//ui-icon, s-icon
    buttons.eq(0).addClass('btn-primary').prepend('<i class="ace-icon fa fa-check"></i>');
    buttons.eq(1).prepend('<i class="ace-icon fa fa-times"></i>')

            buttons = form.next().find('.navButton a');
    buttons.find('.ui-icon').hide();
    buttons.eq(0).append('<i class="ace-icon fa fa-chevron-left"></i>');
    buttons.eq(1).append('<i class="ace-icon fa fa-chevron-right"></i>');
}


        function style_delete_form(form) {
            var buttons = form.next().find('.EditButton .fm-button');
                        buttons.addClass('btn btn-sm btn-white btn-round').find('[class*="-icon"]').hide();//ui-icon, s-icon
                        buttons.eq(0).addClass('btn-danger').prepend('<i class="ace-icon fa fa-trash-o"></i>');
                        buttons.eq(1).addClass('btn-default').prepend('<i class="ace-icon fa fa-times"></i>')
        }

                    function style_search_filters(form) {
                        form.find('.delete-rule').val('X');
                        form.find('.add-rule').addClass('btn btn-xs btn-primary');
                        form.find('.add-group').addClass('btn btn-xs btn-success');
                        form.find('.delete-group').addClass('btn btn-xs btn-danger');
                    }

                    function style_search_form(form) {
                        var dialog = form.closest('.ui-jqdialog');
                        var buttons = dialog.find('.EditTable')
                        buttons.find('.EditButton a[id*="_reset"]').addClass('btn btn-sm btn-info').find('.ui-icon').attr('class', 'ace-icon fa fa-retweet');
                        buttons.find('.EditButton a[id*="_query"]').addClass('btn btn-sm btn-inverse').find('.ui-icon').attr('class', 'ace-icon fa fa-comment-o');
                        buttons.find('.EditButton a[id*="_search"]').addClass('btn btn-sm btn-purple').find('.ui-icon').attr('class', 'ace-icon fa fa-search');
                    }

                    function beforeDeleteCallback(e) {
                        var form = $(e[0]);
                        if (form.data('styled')) return false;
                        form.closest('.ui-jqdialog').find('.ui-jqdialog-titlebar').wrapInner('<div class="widget-header" />')
                        style_delete_form(form);
                        form.data('styled', true);
                    }

                    function beforeEditCallback(e) {
                        var form = $(e[0]);
                        form.closest('.ui-jqdialog').find('.ui-jqdialog-titlebar').wrapInner('<div class="widget-header" />')
                        style_edit_form(form);
                    }

                    function styleCheckbox(table) {
                        /**
                            $(table).find('input:checkbox').addClass('ace')
                            .wrap('<label />')
                            .after('<span class="lbl align-top" />')

                            $('.ui-jqgrid-labels th[id*="_cb"]:first-child')
                            .find('input.cbox[type=checkbox]').addClass('ace')
                            .wrap('<label />').after('<span class="lbl align-top" />');
                        */
                    }

                    function updateActionIcons(table) {
                        /**
                        var replacement =
                        {
                            'ui-ace-icon fa fa-pencil' : 'ace-icon fa fa-pencil blue',
                            'ui-ace-icon fa fa-trash-o' : 'ace-icon fa fa-trash-o red',
                            'ui-icon-disk' : 'ace-icon fa fa-check green',
                            'ui-icon-cancel' : 'ace-icon fa fa-times red'
                        };
                        $(table).find('.ui-pg-div span.ui-icon').each(function(){
                            var icon = $(this);
                            var $class = $.trim(icon.attr('class').replace('ui-icon', ''));
                            if($class in replacement) icon.attr('class', 'ui-icon '+replacement[$class]);
                        })
                        */
                    }

                    //replace icons with FontAwesome icons like above
                    function updatePagerIcons(table) {
                        var replacement =
                        {
                'ui-icon-seek-first': 'ace-icon fa fa-angle-double-left bigger-140',
                'ui-icon-seek-prev': 'ace-icon fa fa-angle-left bigger-140',
                'ui-icon-seek-next': 'ace-icon fa fa-angle-right bigger-140',
                'ui-icon-seek-end': 'ace-icon fa fa-angle-double-right bigger-140'
                        };
            $('.ui-pg-table:not(.navtable) > tbody > tr > .ui-pg-button > .ui-icon').each(function () {
                        var icon = $(this);
                        var $class = $.trim(icon.attr('class').replace('ui-icon', ''));

                if ($class in replacement) icon.attr('class', 'ui-icon ' + replacement[$class]);
            })
        }

        function enableTooltips(table) {
            $('.navtable .ui-pg-button').tooltip({ container: 'body' });
            $(table).find('.ui-pg-div').tooltip({ container: 'body' });
        }

        //var selr = jQuery(grid_selector).jqGrid('getGridParam','selrow');

        $(document).one('ajaxloadstart.page', function (e) {
            $.jgrid.gridDestroy(grid_selector);
            $('.ui-jqdialog').remove();
        });

        //$('#gbox_@grid_id').css({width: parent_column.width()})

        /* 以上是 ace-admin 自帶的 */


        /* chosen select */
        if (!ace.vars['touch']) {
            $('.chosen-select').chosen({ allow_single_deselect: true });
            //resize the chosen on window resize

            $(window)
            .off('resize.chosen')
            .on('resize.chosen', function () {
                $('.chosen-select').each(function () {
                    var $this = $(this);
                    $this.next().css({ 'width': $this.parent().width() });
                })
            }).trigger('resize.chosen');
            //resize chosen on sidebar collapse/expand
            $(document).on('settings.ace.chosen', function (e, event_name, event_val) {
                if (event_name != 'sidebar_collapsed') return;
                $('.chosen-select').each(function () {
                    var $this = $(this);
                    $this.next().css({ 'width': $this.parent().width() });
                })
            });


            $('#chosen-multiple-style .btn').on('click', function (e) {
                var target = $(this).find('input[type=radio]');
                var which = parseInt(target.val());
                if (which == 2) $('#form-field-select-4').addClass('tag-input-style');
                else $('#form-field-select-4').removeClass('tag-input-style');
            });
        }


        @* parital view 自訂義 *@
        @if (!string.IsNullOrEmpty(customJs_bottom) )
        {
            @Html.Raw(customJs_bottom)
        }

       // 點擊儲存按鈕
       document.addEventListener('click', function (e) {
           if (e.target.className.includes('ui-icon-disk')) {
               let rowData = {}
               let $tr = $(e.target).closest('tr.jqgrow')
               $tr.find('input,select').each(function () {
                   let name = $(this).attr('name')
                   let value = $(this).val()
                   rowData[name] = value
               })

               let messages = Jqgrid_CheckInlineUpdate(rowData).messages
               if (messages.length > 0) {
                   alert(messages.join('\n'))

                   //
                   e.stopPropagation()
               }
           }
       }, true)

    }) // jQuery(function(){ ... }) end
    </script>
, "js")



