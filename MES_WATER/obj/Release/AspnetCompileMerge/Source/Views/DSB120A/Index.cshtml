@using MES_WATER.Models;
@using System.Data;


@{ 
    Comm comm = new Comm();


    //string sql = "select mac_code as field_code, mac_name as field_name from MEB15_0000";

    //List<DDLList> mac_code_DDL = comm.Get_DDLOptionBySql(sql);
}

@section head_plugin {
    <link rel="stylesheet" href="~/Content/assets/css/bootstrap-timepicker.min.css" />
    <link rel="stylesheet" href="~/Content/assets/css/bootstrap-datepicker3.min.css" />
    <link rel="stylesheet" href="~/Content/assets/css/bootstrap-datetimepicker.min.css" />
    <link rel="stylesheet" href="~/Content/assets/css/chosen.min.css" />

}

@Html.Partial("pPrgName")

<div>
    <form class="form-horizontal" role="form" id="gantt-queryForm">
        @*<div class="form-group">
            <label class="col-sm-3 control-label no-padding-right" for="prg_code">
                機台代號
            </label>

            <div class="col-sm-9">
                <div class="col-xs-10 col-sm-5 no-padding-right no-padding-left">
                    <select id="mac_code" name="mac_code" class="chosen-select" >
                        @CustomHelper.Get_Option(mac_code_DDL, "", true)
                    </select>
                </div>
            </div>
        </div>*@

        <div class="form-group">
            <label class="col-sm-3 control-label no-padding-right" for="">
                日期起訖
            </label>

            <div class="col-sm-9">
                <input type="text" id="date_s" name="date_s" placeholder=" 預設取當天資料 " class=" col-xs-2 datepicker">
                <div class="col-xs-1 text " style="display: flex; justify-content: space-around; align-items: center; font-size: 24px" >
                    ~
                </div>
                <input type="text" id="date_e" name="date_e" placeholder="yyyy/MM/dd " class="col-xs-2 datepicker"  >
                @*<input type="text" id="usr_date_start" name="usr_date_start" value="" placeholder=" yyyy/MM/dd " class="col-xs-10 col-sm-5">*@
            </div>
        </div>


        @*<div class="form-group">
            <label class="col-sm-3 control-label no-padding-right" for="">
                時間起訖
            </label>

            <div class="col-sm-9">
                <input type="text" id="time_s" name="time_s" placeholder=" HH:mm:ss " class="col-xs-2 timepicker1">
                <div class="col-xs-1  text  " style="display: flex; justify-content: space-around; align-items: center; font-size: 24px">
                    ~
                </div>
                <input type="text" id="time_e" name="time_e" placeholder=" HH:mm:ss " class="col-xs-2 timepicker1">
            </div>

        </div>*@
       

        @*<div class="form-group">
            <label class="col-sm-3 control-label no-padding-right" for="cmemo">
                訊息內容
            </label>

            <div class="col-sm-9">
                <input type="text" id="cmemo" name="cmemo" placeholder=" 搜尋..." class="col-xs-10 col-sm-5">
            </div>
        </div>*@

        <div class="clearfix ">
            <div class="col-md-offset-3 col-md-9">
                <button class="btn btn-info" type="submit">
                    <i class="ace-icon fa fa-check bigger-110"></i>
                    查詢
                </button>
                @*&nbsp;&nbsp;&nbsp;
                <button id="timeline-2-reset" class="btn btn-success" type="button">
                    <i class="ace-icon fa fa-refresh bigger-110"></i>
                    重置
                </button>*@
                &nbsp;&nbsp;&nbsp;
                <button  class="btn clearForm" type="reset">
                    <i class="ace-icon fa fa-undo bigger-110"></i>
                    清空輸入欄
                </button>

            </div>
        </div>
    </form>

</div>

<br />

<div >
    <div id="container" style="height: 90vh"></div>
</div>

@section footer_script{
    <!-- bootstrap-timepicker -->
<script src="~/Scripts/assets/js/bootstrap-timepicker.min.js"></script>

<!-- bootstrap-datetimepicker -->
<script src="~/Scripts/assets/js/moment.min.js"></script>
<script src="~/Scripts/assets/js/bootstrap-datetimepicker.min.js"></script>

<!-- bootstrap-datepicker -->
<script src="~/Scripts/assets/js/bootstrap-datepicker.min.js"></script>
<script src="~/Scripts/assets/js/bootstrap-datepicker.zh-TW.min.js"></script>

<!-- highlight -->
<script src="~/Scripts/assets/js/jquery.highlight.js"></script>

<!-- chosen -->
<script src="~/Scripts/assets/js/chosen.jquery.min.js"></script>

@* 官方最新版 *@
@*<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js"></script>*@
<script type="text/javascript" src="~/Scripts/echarts 4.8.0/echarts.min.js"></script>


<script type="text/javascript">
    jQuery(function ($) {



var dom = document.getElementById("container");
var myChart = echarts.init(dom);
var app = {};
option = null;
var HEIGHT_RATIO = 0.6;
var DIM_CATEGORY_INDEX = 0;
var DIM_TIME_ARRIVAL = 1;
var DIM_TIME_DEPARTURE = 2;
var DATA_ZOOM_AUTO_MOVE_THROTTLE = 30;
var DATA_ZOOM_X_INSIDE_INDEX = 1;
var DATA_ZOOM_Y_INSIDE_INDEX = 3;
var DATA_ZOOM_AUTO_MOVE_SPEED = 0.2;
var DATA_ZOOM_AUTO_MOVE_DETECT_AREA_WIDTH = 30;

var GRID_HEIGHT = 0;

var _draggable;
var _draggingEl;
var _dropShadow;
var _draggingCursorOffset = [0, 0];
var _draggingTimeLength;
var _draggingRecord;
var _dropRecord;
var _cartesianXBounds = [];
var _cartesianYBounds = [];
var _rawData;
var _autoDataZoomAnimator;





function makeOption() {
    return {
        tooltip: {
        },
        animation: false,
        toolbox: {
            left: 20,
            top: 0,
            itemSize: 20,
            feature: {
                myDrag: {
                    show: true,
                    title: 'Make bars\ndraggable',
                    icon: 'path://M990.55 380.08 q11.69 0 19.88 8.19 q7.02 7.01 7.02 18.71 l0 480.65 q-1.17 43.27 -29.83 71.93 q-28.65 28.65 -71.92 29.82 l-813.96 0 q-43.27 -1.17 -72.5 -30.41 q-28.07 -28.07 -29.24 -71.34 l0 -785.89 q1.17 -43.27 29.24 -72.5 q29.23 -29.24 72.5 -29.24 l522.76 0 q11.7 0 18.71 7.02 q8.19 8.18 8.19 18.71 q0 11.69 -7.6 19.29 q-7.6 7.61 -19.3 7.61 l-518.08 0 q-22.22 1.17 -37.42 16.37 q-15.2 15.2 -15.2 37.42 l0 775.37 q0 23.39 15.2 38.59 q15.2 15.2 37.42 15.2 l804.6 0 q22.22 0 37.43 -15.2 q15.2 -15.2 16.37 -38.59 l0 -474.81 q0 -11.7 7.02 -18.71 q8.18 -8.19 18.71 -8.19 l0 0 ZM493.52 723.91 l-170.74 -170.75 l509.89 -509.89 q23.39 -23.39 56.13 -21.05 q32.75 1.17 59.65 26.9 l47.94 47.95 q25.73 26.89 27.49 59.64 q1.75 32.75 -21.64 57.3 l-508.72 509.9 l0 0 ZM870.09 80.69 l-56.13 56.14 l94.72 95.9 l56.14 -57.31 q8.19 -9.35 8.19 -21.05 q-1.17 -12.86 -10.53 -22.22 l-47.95 -49.12 q-10.52 -9.35 -23.39 -9.35 q-11.69 -1.17 -21.05 7.01 l0 0 ZM867.75 272.49 l-93.56 -95.9 l-380.08 380.08 l94.73 94.73 l378.91 -378.91 l0 0 ZM322.78 553.16 l38.59 39.77 l-33.92 125.13 l125.14 -33.92 l38.59 38.6 l-191.79 52.62 q-5.85 1.17 -12.28 0 q-6.44 -1.17 -11.11 -5.84 q-4.68 -4.68 -5.85 -11.7 q-2.34 -5.85 0 -11.69 l52.63 -192.97 l0 0 Z',
                    onclick: onDragSwitchClick
                }
            }
        },
        title: {
            text: '時序圖',
            left: 'center'
        },
        dataZoom: [
            {
            type: 'slider',
            xAxisIndex: 0,
            filterMode: 'weakFilter',
            height: 20,
            bottom: 0,
            start: 0,
            end: 100, //26,
            handleIcon: 'M10.7,11.9H9.3c-4.9,0.3-8.8,4.4-8.8,9.4c0,5,3.9,9.1,8.8,9.4h1.3c4.9-0.3,8.8-4.4,8.8-9.4C19.5,16.3,15.6,12.2,10.7,11.9z M13.3,24.4H6.7V23h6.6V24.4z M13.3,19.6H6.7v-1.4h6.6V19.6z',
            handleSize: '80%',
            showDetail: false
        },
        {
            type: 'inside',
            id: 'insideX',
            xAxisIndex: 0,
            filterMode: 'weakFilter',
            start: 0,
            end: 26,
            zoomOnMouseWheel: false,
            moveOnMouseMove: true
        },
        {
            type: 'slider',
            yAxisIndex: 0,
            zoomLock: true,
            width: 10,
            right: 10,
            top: 70,
            bottom: 20,
            start: 0,
            end: 80,  // 神奇數字 神奇屬性 可以調整Y軸每個刻度的高度間距 和 整個grid高度
            handleSize: 0,
            showDetail: false,
        },
        {
            type: 'inside',
            id: 'insideY',
            yAxisIndex: 0,
            start: 0,
            end: 35,  // 神奇數字 神奇屬性 可以調整Y軸刻度的高度間距 和 整個grid高度
            zoomOnMouseWheel: false,
            moveOnMouseMove: true,
            moveOnMouseWheel: true
        }
        ],
        grid: {
            show: true,
            top: 70,
            bottom: 20,
            left: 190,
            right: 20,
            backgroundColor: '#fff',
            borderWidth: 0,
            //height: GRID_HEIGHT
        },
        xAxis: {
            type: 'time',
            position: 'top',
            splitLine: {
                lineStyle: {
                    color: ['#E9EDFF']
                }
            },
            axisLine: {
                show: false
            },
            axisTick: {
                lineStyle: {
                    color: '#929ABA'
                }
            },
            axisLabel: {
                color: '#929ABA',
                inside: false,
                align: 'center'
            }
        },
        yAxis: {
            axisTick: {show: false},
            splitLine: { show: true },
            axisLine: { show: false },
            axisLabel: { show: false },
            min: -1,  // 0
            max: _rawData.parkingApron.data.length ,
            interval: 1,
            inverse: true,
         
        },
        series: [{
            id: 'flightData',
            type: 'custom',
            renderItem: renderGanttItem,
            dimensions: _rawData.flight.dimensions,
            encode: {
                x: [DIM_TIME_ARRIVAL, DIM_TIME_DEPARTURE],
                y: DIM_CATEGORY_INDEX,
                tooltip: [DIM_TIME_ARRIVAL, DIM_TIME_DEPARTURE, 4, 5, 6]   // 決定hover到item上會秀出的資料  (index)
                //tooltip: [DIM_CATEGORY_INDEX, DIM_TIME_ARRIVAL, DIM_TIME_DEPARTURE]
            },
            data: _rawData.flight.data
        }, {
            type: 'custom',
            renderItem: renderAxisLabelItem,
            dimensions: _rawData.parkingApron.dimensions,
            encode: {
                x: -1, // Then this series will not controlled by x.
                y: 0
            },
            data: echarts.util.map(_rawData.parkingApron.data, function (item, index) {
                return [index].concat(item);
            })
        }]
    };
}

function renderGanttItem(params, api) {
    var categoryIndex = api.value(DIM_CATEGORY_INDEX);
    var timeArrival = api.coord([api.value(DIM_TIME_ARRIVAL), categoryIndex]);
    var timeDeparture = api.coord([api.value(DIM_TIME_DEPARTURE), categoryIndex]);

    var coordSys = params.coordSys;
    _cartesianXBounds[0] = coordSys.x;
    _cartesianXBounds[1] = coordSys.x + coordSys.width;
    _cartesianYBounds[0] = coordSys.y;
    _cartesianYBounds[1] = coordSys.y + coordSys.height;

    var barLength = timeDeparture[0] - timeArrival[0];
    // Get the heigth corresponds to length 1 on y axis.
    var barHeight = api.size([0, 1])[1] * HEIGHT_RATIO;
    var x = timeArrival[0];
    var y = timeArrival[1] - barHeight;


    var flightNumber = api.value(3) + '';
    var flightNumberWidth = echarts.format.getTextRect(flightNumber).width;
    var text = (barLength > flightNumberWidth + 40 && x + barLength >= 180)
        ? flightNumber : '';

    var item_s = api.value(1)  // timestamp 
    var item_e = api.value(2)  // timestamp
    var usr_code = api.value(3)
    var work_seconds = api.value(4)

    var r = 0;  // 黃色比例
    if (work_seconds) {
        r = ((item_e - item_s) / 1000) / work_seconds  
    }
    r = Math.min(1, r)

    var rectNormal = clipRectByRect(params, {
        x: x, y: y, width: barLength, height: barHeight
    });
    var rectVIP = clipRectByRect(params, {
        x: x, y: y, width: (barLength)* r , height: barHeight
    });
    var rectText = clipRectByRect(params, {
        x: x, y: y, width: barLength, height: barHeight
    });

    return {
        type: 'group',
        children: [{
            type: 'rect',
            ignore: !rectNormal,
            shape: rectNormal,
            style: api.style()
        }, {
            type: 'rect',
            ignore: !rectVIP && !api.value(4),
            shape: rectVIP,
            style: api.style({fill: '#ddb30b'})
        }, {
            type: 'rect',
            ignore: !rectText,
            shape: rectText,
            style: api.style({
                fill: 'transparent',
                stroke: 'transparent',
                text: text,
                fontSize: 24,
                textFill: '#fff'
            })
        }]
    };
}

function renderAxisLabelItem(params, api) {
    
    var y = api.coord([0, api.value(0)])[1];

    var mac_code = api.value(1)
    var mac_name = api.value(2)
    
    if (y < params.coordSys.y + 5) {
        return;
    }
    return {
        type: 'group',
        position: [
            0,
            y
        ],
        children: [{
            type: 'path',
            shape: {
                d: 'M0,0 L0,-20 L30,-20 C42,-20 38,-1 50,-1 L70,-1 L70,0 Z',
                x: 0,
                y: -20,
                width: 130,
                height: 20,
                layout: 'cover'
            },
            style: {
                fill: '#368c6c'
            }
        }, {
            type: 'text',
            style: {
                x: 36,
                y: -3,
                text: mac_code,
                textVerticalAlign: 'bottom',
                textAlign: 'center',
                textFill: '#fff'
            }
        },
        {
            type: 'text',
            style: {
                x: 85,
                y: -2,
                textVerticalAlign: 'bottom',
                textAlign: 'left',
                text: mac_name,
                textFill: '#000'
            }
        }
        ]
    };
}


function clipRectByRect(params, rect) {
    return echarts.graphic.clipRectByRect(rect, {
        x: params.coordSys.x,
        y: params.coordSys.y,
        width: params.coordSys.width,
        height: params.coordSys.height
    });
}

// -------------
//  Enable Drag
// -------------

function onDragSwitchClick(model, api, type) {
    _draggable = !_draggable;
    myChart.setOption({
        dataZoom: [{
            id: 'insideX',
            disabled: _draggable
        }, {
            id: 'insideY',
            disabled: _draggable
        }]
    });
    this.model.setIconStatus(type, _draggable ? 'emphasis' : 'normal');
}

function initDrag() {

    _autoDataZoomAnimator = makeAnimator(dispatchDataZoom);

    myChart.on('mousedown', function (param) {
        if (!_draggable || !param || param.seriesIndex == null) {
            return;
        }

        // Drag start
        _draggingRecord = {
            dataIndex: param.dataIndex,
            categoryIndex: param.value[DIM_CATEGORY_INDEX],
            timeArrival: param.value[DIM_TIME_ARRIVAL],
            timeDeparture: param.value[DIM_TIME_DEPARTURE]
        };
        var style = {lineWidth: 2, fill: 'rgba(255,0,0,0.1)', stroke: 'rgba(255,0,0,0.8)', lineDash: [6, 3]};

        _draggingEl = addOrUpdateBar(_draggingEl, _draggingRecord, style, 100);
        _draggingCursorOffset = [
            _draggingEl.position[0] - param.event.offsetX,
            _draggingEl.position[1] - param.event.offsetY
        ];
        _draggingTimeLength = _draggingRecord.timeDeparture - _draggingRecord.timeArrival;
    });

    myChart.getZr().on('mousemove', function (event) {
        if (!_draggingEl) {
            return;
        }

        var cursorX = event.offsetX;
        var cursorY = event.offsetY;

        // Move _draggingEl.
        _draggingEl.attr('position', [
            _draggingCursorOffset[0] + cursorX,
            _draggingCursorOffset[1] + cursorY,
        ]);

        prepareDrop();

        autoDataZoomWhenDraggingOutside(cursorX, cursorY);
    });

    myChart.getZr().on('mouseup', function () {
        // Drop
        if (_draggingEl && _dropRecord) {

            updateRawData() && myChart.setOption({
                series: {
                    id: 'flightData',
                    data: _rawData.flight.data
                }
            });
        }
        dragRelease();
    });

    myChart.getZr().on('globalout', dragRelease);

    function dragRelease() {
        _autoDataZoomAnimator.stop();

        if (_draggingEl) {
            myChart.getZr().remove(_draggingEl);
            _draggingEl = null;
        }
        if (_dropShadow) {
            myChart.getZr().remove(_dropShadow);
            _dropShadow = null;
        }
        _dropRecord = _draggingRecord = null;
    }

    function addOrUpdateBar(el, itemData, style, z) {
        var pointArrival = myChart.convertToPixel('grid', [itemData.timeArrival, itemData.categoryIndex]);
        var pointDeparture = myChart.convertToPixel('grid', [itemData.timeDeparture, itemData.categoryIndex]);

        var barLength = pointDeparture[0] - pointArrival[0];
        var barHeight = Math.abs(
            myChart.convertToPixel('grid', [0, 0])[1] - myChart.convertToPixel('grid', [0, 1])[1]
        ) * HEIGHT_RATIO;

        if (!el) {
            el = new echarts.graphic.Rect({
                shape: {x: 0, y: 0, width: 0, height: 0},
                style: style,
                z: z
            });
            myChart.getZr().add(el);
        }
        el.attr({
            shape: {x: 0, y: 0, width: barLength, height: barHeight},
            position: [pointArrival[0], pointArrival[1] - barHeight]
        });
        return el;
    }

    function prepareDrop() {
        // Check droppable place.
        var xPixel = _draggingEl.shape.x + _draggingEl.position[0];
        var yPixel = _draggingEl.shape.y + _draggingEl.position[1];
        var cursorData = myChart.convertFromPixel('grid', [xPixel, yPixel]);
        if (cursorData) {
            // Make drop shadow and _dropRecord
            _dropRecord = {
                categoryIndex: Math.floor(cursorData[1]),
                timeArrival: cursorData[0],
                timeDeparture: cursorData[0] + _draggingTimeLength
            };
            var style = {fill: 'rgba(0,0,0,0.4)'};
            _dropShadow = addOrUpdateBar(_dropShadow, _dropRecord, style, 99);
        }
    }

    // This is some business logic, don't care about it.
    function updateRawData() {
        var flightData = _rawData.flight.data;
        var movingItem = flightData[_draggingRecord.dataIndex];

        // Check conflict
        for (var i = 0; i < flightData.length; i++) {
            var dataItem = flightData[i];
            if (dataItem !== movingItem
                && _dropRecord.categoryIndex === dataItem[DIM_CATEGORY_INDEX]
                && _dropRecord.timeArrival < dataItem[DIM_TIME_DEPARTURE]
                && _dropRecord.timeDeparture > dataItem[DIM_TIME_ARRIVAL]
            ) {
                alert('Conflict! Find a free space to settle the bar!');
                return;
            }
        }

        // No conflict.
        movingItem[DIM_CATEGORY_INDEX] = _dropRecord.categoryIndex;
        movingItem[DIM_TIME_ARRIVAL] = _dropRecord.timeArrival;
        movingItem[DIM_TIME_DEPARTURE] = _dropRecord.timeDeparture;
        return true;
    }

    function autoDataZoomWhenDraggingOutside(cursorX, cursorY) {
        // When cursor is outside the cartesian and being dragging,
        // auto move the dataZooms.
        var cursorDistX = getCursorCartesianDist(cursorX, _cartesianXBounds);
        var cursorDistY = getCursorCartesianDist(cursorY, _cartesianYBounds);

        if (cursorDistX !== 0 || cursorDistY !== 0) {
            _autoDataZoomAnimator.start({
                cursorDistX: cursorDistX,
                cursorDistY: cursorDistY
            });
        }
        else {
            _autoDataZoomAnimator.stop();
        }
    }

    function dispatchDataZoom(params) {
        var option = myChart.getOption();
        var optionInsideX = option.dataZoom[DATA_ZOOM_X_INSIDE_INDEX];
        var optionInsideY = option.dataZoom[DATA_ZOOM_Y_INSIDE_INDEX];
        var batch = [];

        prepareBatch(batch, 'insideX', optionInsideX.start, optionInsideX.end, params.cursorDistX);
        prepareBatch(batch, 'insideY', optionInsideY.start, optionInsideY.end, -params.cursorDistY);

        batch.length && myChart.dispatchAction({
            type: 'dataZoom',
            batch: batch
        });

        function prepareBatch(batch, id, start, end, cursorDist) {
            if (cursorDist === 0) {
                return;
            }
            var sign = cursorDist / Math.abs(cursorDist);
            var size = end - start;
            var delta = DATA_ZOOM_AUTO_MOVE_SPEED * sign;

            start += delta;
            end += delta;

            if (end > 100) {
                end = 100;
                start = end - size;
            }
            if (start < 0) {
                start = 0;
                end = start + size;
            }
            batch.push({
                dataZoomId: id,
                start: start,
                end: end
            });
        }
    }

    function getCursorCartesianDist(cursorXY, bounds) {
        var dist0 = cursorXY - (bounds[0] + DATA_ZOOM_AUTO_MOVE_DETECT_AREA_WIDTH);
        var dist1 = cursorXY - (bounds[1] - DATA_ZOOM_AUTO_MOVE_DETECT_AREA_WIDTH);
        return dist0 * dist1 <= 0
            ? 0 // cursor is in cartesian
            : dist0 < 0
            ? dist0 // cursor is at left/top of cartesian
            : dist1; // cursor is at right/bottom of cartesian
    }

    function makeAnimator(callback) {
        var requestId;
        var callbackParams;
        // Use throttle to prevent from calling dispatchAction frequently.
        callback = echarts.throttle(callback, DATA_ZOOM_AUTO_MOVE_THROTTLE);

        function onFrame() {
            callback(callbackParams);
            requestId = requestAnimationFrame(onFrame);
        }

        return {
            start: function (params) {
                callbackParams = params;
                if (requestId == null) {
                    onFrame();
                }
            },
            stop: function () {
                if (requestId != null) {
                    cancelAnimationFrame(requestId);
                }
                requestId = callbackParams = null;
            }
        };
    }


}  // end of initDrag

$('#gantt-queryForm').submit(function (e) {
    e.preventDefault()

    let postData = {}

    postData['date_s'] = $('[name=date_s]').val()
    postData['date_e'] = $('[name=date_e]').val()
    postData['time_s'] = $('[name=time_s]').val()
    postData['time_e'] = $('[name=time_e]').val()

    $.post('/DSB120A/Get_RawData', postData, function (data) {
        console.log(data)

        _rawData = data;

        if (!GRID_HEIGHT)
            GRID_HEIGHT = _rawData.parkingApron.data.length * 50


        myChart.clear()

        myChart.setOption(option = makeOption());

        initDrag();
    })

})



        // time js in query form div
        // button設type="reset"內建重置input，
$('#gantt-queryForm').find('.clearForm').click(function (e) {
    // 重置 chosen select
    $('#gantt-queryForm').find('select').each(function () {
        $(this).val('')
        $(this).trigger('chosen:updated')
    })

    // refresh multiselect
    //$('#gantt-queryForm').find('select[class*="multiselect"]').multiselect("refresh")
})

        // HH:mm:ss 轉成12小時制 pm am
function formatAMPM(dateString) {

    let arr = dateString.split(':')

    var hours = parseInt(arr[0]);
    var minutes = parseInt(arr[1]);
    var ampm = hours >= 12 ? 'PM' : 'AM';
    hours = hours % 12;
    hours = hours ? hours : 12; // the hour '0' should be '12'
    minutes = minutes < 10 ? '0' + minutes : minutes;
    var strTime = hours + ':' + minutes + ' ' + ampm;
    return strTime;
}

        // 取得今天日期 (yyyy/MM/dd)
function GetDate() {
    let today = new Date();
    let y = today.getFullYear()
    let m = (today.getMonth() + 1) > 9 ? (today.getMonth() + 1) : '0' + (today.getMonth() + 1)
    let d = today.getDate() > 9 ? today.getDate() : '0' + today.getDate()
    let date = y + '/' + m + '/' + d;
    return date
}

        // 取得現在時間 (HH:mm:ss)
function GetTime() {
    let today = new Date();
    var h = today.getHours();
    var m = today.getMinutes() > 9 ? today.getMinutes() : '0' + today.getMinutes();
    var s = today.getSeconds() > 9 ? today.getSeconds() : '0' + today.getSeconds();
    let time = h + ":" + m + ":" + s
    return time
}

        // HH:mm:ss to Date
function timeToDate(pTimeString) {
    let tempTime = pTimeString.split(':')
    let dt = new Date();
    dt.setHours(tempTime[0]);
    dt.setMinutes(tempTime[1]);
    dt.setSeconds(tempTime[2]);
    return dt;
}

        // HH:mm am/pm to Date
function ampmToDate(pTimeString, pSeconds) {
    let tempTime = pTimeString

    let dt = new Date();

    let regex_am = /am/i;
    let regex_pm = /pm/i;

    let ampm = ''
    if (regex_am.test(tempTime)) {
        tempTime = tempTime.replace(regex_am, '')
        ampm = 'am'
    }
    if (regex_pm.test(tempTime)) {
        tempTime = tempTime.replace(regex_pm, '')
        ampm = 'pm'
    }
    tempTime = tempTime.trim()
    let temp = tempTime.split(':')

    if (ampm === 'pm') {
        dt.setHours(parseInt(temp[0]) + 12);
    } else {
        dt.setHours(temp[0]);
    }
    dt.setMinutes(temp[1]);
    if (typeof pSecond === 'number') {
        dt.setSeconds(pSeconds);
    }
    return dt
}

        // return 0 (equal) / 1 (first > second) / 2 (second > first)
function compareHHmm(pDate1, pDate2) {
    let h1 = pDate1.getHours()
    let m1 = pDate1.getMinutes()

    let h2 = pDate2.getHours()
    let m2 = pDate2.getMinutes()

    if (h1 === h2) {
        if (m1 > m2) {
            return 1
        } else if (m1 < m2) {
            return 2
        } else {
            return 0
        }
    }

    if (h1 > h2) {
        return 1
    }
    if (h1 < h2) {
        return 2
    }
}
        // datetimpicker
if (!ace.vars['old_ie']) {
    $('.timepicker1').datetimepicker({
        //format: 'MM/DD/YYYY h:mm:ss A',//use this option to display seconds
        format: 'HH:mm:ss',
        useCurrent: false,
        icons: {
            time: 'fa fa-clock-o',
            date: 'fa fa-calendar',
            up: 'fa fa-chevron-up',
            down: 'fa fa-chevron-down',
            previous: 'fa fa-chevron-left',
            next: 'fa fa-chevron-right',
            today: 'fa fa-arrows ',
            clear: 'fa fa-trash',
            close: 'fa fa-times'
        },
    }).attr('autocomplete', 'off')
 
}

        // datepicker
        $(".datepicker").datepicker({ language: 'zh-TW', format: 'yyyy/mm/dd', autoclose: true })
                           .attr('autocomplete', 'off')
        .datepicker('setDate', 'now')  //預設日期


        // chosen select
if (!ace.vars['touch']) {
    $('.chosen-select').chosen({ allow_single_deselect: true });
    //resize the chosen on window resize

    $(window)
    .off('resize.chosen')
    .on('resize.chosen', function () {
        $('.chosen-select').each(function () {
            var $this = $(this);
            $this.next().css({ 'width': $this.parent().width() });
        })
    }).trigger('resize.chosen');
    //resize chosen on sidebar collapse/expand
    $(document).on('settings.ace.chosen', function (e, event_name, event_val) {
        if (event_name != 'sidebar_collapsed') return;
        $('.chosen-select').each(function () {
            var $this = $(this);
            $this.next().css({ 'width': $this.parent().width() });
        })
    });


    $('#chosen-multiple-style .btn').on('click', function (e) {
        var target = $(this).find('input[type=radio]');
        var which = parseInt(target.val());
        if (which == 2) $('#form-field-select-4').addClass('tag-input-style');
        else $('#form-field-select-4').removeClass('tag-input-style');
    });



    // init gantt chart
    $('#gantt-queryForm').submit()


}




//if (option && typeof option === "object") {
//    myChart.setOption(option, true);
//}

    })

</script>

}